Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Find the number of islands.

class Solution:
    """
    @param grid: a boolean 2D matrix
    @return: an integer
    """
    def numIslands(self, grid):
        # write your code here
        if not grid or not grid[0]:
            return 0
        
        islands = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]:
                    self.bfs(grid, i ,j)
                    islands += 1
                    
        return islands

    def bfs(self, grid, i,j):
        q = []
        q.append((i,j))
        grid [i][j] = 0
        while q:
            x, y = q.pop(0)
            for m,n in [(0,1),(0,-1),(1,0),(-1,0)]:
                next_x, next_y = x+m, y+n
                if not self.is_valid(grid, next_x, next_y):
                    continue
                grid [next_x][next_y] = 0
                q.append((next_x, next_y))
            
    def is_valid(self, grid, i, j):
        m,n = len(grid), len(grid[0])
        return (i>=0) and (i<m) and (j>=0) and (j<n) and grid[i][j]
