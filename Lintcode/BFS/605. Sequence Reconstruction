Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 10^4. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.



class Solution:
    """
    @param org: a permutation of the integers from 1 to n
    @param seqs: a list of sequences
    @return: true if it can be reconstructed only one or false
    """
    def sequenceReconstruction(self, org, seqs):
        # write your code here
        graph = self.build_graph(seqs)
        topo_order = self.top_graph(graph)
        return topo_order == org
        
    def build_graph(self, seqs):
        graph = {}
        for seq in seqs:
            for node in seq:
                if node not in graph:
                    graph[node] = set()
                    
        for seq in seqs:
            for i in range(1,len(seq)):
                graph[seq[i-1]].add(seq[i])
                
        return graph
        
        
    def indegree(self, graph):
        indegree = {i:0 for i in graph}
        for node in graph:
            for j in graph[node]:
                indegree[j] += 1
                
        return indegree
        
    def top_graph(self, graph):
        indegree = self.indegree(graph)
        tp_order = []
        q = []
        for i in graph:
            if indegree[i] == 0:
                q.append(i)
        
        while q:
            if len(q) > 1:
                return None
            v = q.pop(0)
            tp_order.append(v)
            for i in graph[v]:
                indegree[i] -= 1
                if indegree [i] ==0:
                    q.append(i)
        if len(tp_order) == len(graph):
            return tp_order
        return None
            
            
