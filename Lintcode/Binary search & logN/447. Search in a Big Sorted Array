Given a big sorted array with non-negative integers sorted by non-decreasing order. The array is so big so that you can not get the length of the whole array directly, and you can only access the kth number by ArrayReader.get(k) (or ArrayReader->get(k) for C++).

Find the first index of a target number. Your algorithm should be in O(log k), where k is the first index of the target number.

Return -1, if the number doesn't exist in the array.




/**
 * Definition of ArrayReader:
 * 
 * class ArrayReader {
 * public:
 *     int get(int index) {
 *          // return the number on given index, 
 *          // return 2147483647 if the index is invalid.
 *     }
 * };
 */
class Solution {
public:
    /*
     * @param reader: An instance of ArrayReader.
     * @param target: An integer
     * @return: An integer which is the first index of target.
     */






    int searchBigSortedArray(ArrayReader * reader, int target) {
        // write your code here
        if (reader->get(0) > target)
            return -1;
        // start with 500 number
        int start = 0, end = 1;
        // if target is located after 500th
        while (reader->get(end)<target){
            end <<= 1;
            //int mid2 = end;
            //int start = mid2, end = mid2 *2;
        }
        while (start < end){
            int mid = (start+end)/2;
           // if (reader->get(mid) == target)
             //   return mid;
            if (reader->get(mid) >= target)
                end = mid;
            else
                start = mid +1;
        }
        if (reader->get(start) == target)
            return start;
        else 
            return -1;
        
        
    }
};
